@page "/manage-tasks"
@inject HttpClient http
@using Domain.ViewModel
@using WebClient.Abstractions
@using WebClient.Shared.Models
@using WebClient.Components
@using WebClient.Shared.Components
@inject IMemberDataService memberService;
@inject ITaskDataService taskDataService;

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu PageTitle="ManageTasks" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <EditForm Model="@_createTaskVm" OnValidSubmit="@AddTaskSubmit">
                    <DataAnnotationsValidator />
                    <div class="col-10 offset-1 pt-5">
                        <div class="row m-0">
                            <Field class="col-9 p-0 custom-input">
                                <TextEdit Placeholder="Enter New Task" @bind-text="@_createTaskVm.Subject" />
                                <ValidationMessage For="() => _createTaskVm.Subject" />
                            </Field>
                            <div class="col-3 p-0 text-right">
                                <button type="submit" class="add-btn px-4">Add</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
                <div class="col-10 offset-1">
                    <TaskListerComponent />
                </div>
            }
            @if (false)
            {
                <div class="col-10 offset-1 pt-5">
                </div>
            }
        </div>
    </div>
}

@code {

    public List<MemberVm> members;
    private CreateTaskVm _createTaskVm = new CreateTaskVm();

    private bool isLoaded;
    private bool showLister;

    protected override Task OnInitializedAsync()
    {
        showLister = true;
        isLoaded = true;
        return base.OnInitializedAsync();
    }

    private async Task AddTaskSubmit()
    {
        if (memberService.SelectedMember != null)
        {
            _createTaskVm.AssignedMemberId = memberService.SelectedMember.Id;
        }
        await taskDataService.AddTask(_createTaskVm);
        _createTaskVm = new CreateTaskVm();
        StateHasChanged();
    }
}